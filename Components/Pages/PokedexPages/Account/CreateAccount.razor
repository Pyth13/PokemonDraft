@page "/createaccount"
@using PokemonDraft.Data
@using PokemonDraft.Models.ViewModels
@using PokemonDraft.Models.Entities
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using BCrypt.Net
@inject PokemonDraftContext dbContext
@inject NavigationManager NavigationManager


<h3>CreateAccount</h3>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="Model" OnValidSubmit="AccountCreation" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="username" />  
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="password" />    
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Create Account</button>
            </div>
        </EditForm>
    </div>

</div>

@code {

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    public string? errorMessage;

    private Trainer Trainer = new Trainer();

    public async Task AccountCreation()
    {
        if (string.IsNullOrWhiteSpace(Model.UserName) ||
            string.IsNullOrWhiteSpace(Model.Password))
        {
            errorMessage = "Invalid username or password";
            return;
        }

        //var hashedPassword = BCrypt.EnhancedHashPassword(Model.Password, 13);
        //Model.Password = hashedPassword;

        Trainer.TrainerName = Model.UserName;
        Trainer.Password = Model.Password;

        dbContext.Trainer.Add(Trainer);
        await dbContext.SaveChangesAsync();

        Model.Password = "";
        Redirect();

        void Redirect()
        {
            NavigationManager.NavigateTo("login");
        }
    }
}
