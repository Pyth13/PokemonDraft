@page "/livedraft"
@rendermode InteractiveServer
@using System.Timers
@using System.Globalization
@using Microsoft.Data.SqlClient
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using PokemonDraft.Models
@using PokemonDraft.Models.Entities
@using PokemonDraft.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Rendering
@implements IAsyncDisposable
@implements IDisposable
@inject IDbContextFactory<PokemonDraft.Data.PokemonDraftContext> DbFactory
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager navigationManager

<base href="~/" />

<AuthorizeView Context="authContext">
    <Authorized>
        <h1>Logged in as <b>@authContext.User.Identity!.Name</b></h1>
        <h1> next pick is @nextPick</h1>
    </Authorized>
</AuthorizeView>

@if (confirmPopup)
{
    <div class="modal-overlay" @onclick="HideConfirm">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h3>Confirm Window</h3>
            <AuthorizeView>
                <Authorized>
                    <h1><b>@context.User.Identity.Name @message</b></h1>
                    @* <button class="pick-button" @onclick="ConfirmChoice">Confirm Selection</button> *@
                    <button class="pick-button" @onclick="ConfirmChoice">Confirm Selection</button>
                </Authorized>
            </AuthorizeView>

            <button class="btn btn-secondary" @onclick="HideConfirm">Go Back</button>
        </div>
    </div>
}

@if (isTimeUp)
{
    <p class="alert alert-danger">Time's Up!</p>
}

<div class="draft-box">
    <div>
    <h3>Draft Timer</h3>

    <p>Time remaining: @remainingTimeFormatted</p>

    <p>Round: @round, Pick: @pick</p>

    @if (isTimeUp)
    {
        <p class="alert alert-danger">Time's Up!</p>
    }

    <button @onclick="SetTimerTo4Hours">Early Round Timer</button>
    <button @onclick="SetTimerTo2Hours">Later Round Timer</button>
    <button @onclick="SetTimerTo3PM">DEBUG</button>
    <button @onclick="ResetTimerTo4Hours">Next Player</button>

        <br>Recent Picks<br />

    <div class="box">
        <QuickGrid style="width:100%" Pagination="@pagination" Items="RecentPicks" Theme="draft" >
            <PropertyColumn Property="DraftStats => DraftStats.Pick" Sortable="true" 
                IsDefaultSortColumn InitialSortDirection="SortDirection.Descending"/>
            <PropertyColumn Property="DraftStats => DraftStats.Round" Sortable="true" />
            <PropertyColumn Property="DraftStats => DraftStats.Pokemon" Sortable="true" />
            <PropertyColumn Property="DraftStats => DraftStats.Owner" Sortable="true" />
            <PropertyColumn Property="DraftStats => DraftStats.Tier" Sortable="true" />
            <TemplateColumn Context="roster">
            </TemplateColumn>
        </QuickGrid>
    </div>
        @* <Paginator State="@pagination" /> *@

    </div>
    <div>
        <h3>Upcoming Picks</h3>
        <div class="box">
            <QuickGrid style="width:100%" Pagination="@pagination" Items="UpcomingPicks" Theme="draft">
                <PropertyColumn Property="DraftStats => DraftStats.Pick" Sortable="true"
                                IsDefaultSortColumn InitialSortDirection="SortDirection.Ascending" />
                <PropertyColumn Property="DraftStats => DraftStats.Round" Sortable="true" />
                <PropertyColumn Property="DraftStats => DraftStats.Owner" Sortable="true" />
                <TemplateColumn Context="roster">
                </TemplateColumn>
            </QuickGrid>
        </div>
        @* <Paginator State="@pagination" /> *@
    </div>
    <div>
        <h3>Roster</h3>
        <h4>Search Trainer:

        <select @bind="trainerFilter">
            <option value="Pyth">Pyth</option>
            <option value="Rusty">Rusty</option>
            <option value="Inuktitut">Inuktitut</option>
            <option value="Delsere">Delsere</option>
            <option value="Austin">Austin</option>
            <option value="Tori">Tori</option>
            <option value="ThatHalfAss">ThatHalfAss</option>
            <option value="Bigbuff">Bigbuff</option>
            <option value="Ceise">Ceise</option>
            <option value="Orasyn">Orasyn</option>
            <option value="Chax">Abby</option>
            <option value="Kaboomie">Kaboomie</option>
            <option value="Zuzu">Zuzu</option>
            <option value="Brew">Brew</option>
            <option value="Aaron">Aaron</option>
            <option value="Locke">Locke</option>
        </select>
        </h4>

        <QuickGrid style = "width:100%" Items="RosterFilter" Theme="roster">
            <PropertyColumn Property="roster => roster.Mega" />
        <TemplateColumn Context="roster">
        </TemplateColumn>
        </QuickGrid>
        <QuickGrid style="width:100%" Items="RosterFilter" Theme="roster">
            <PropertyColumn Property="roster => roster.TierOneA"  />
            <PropertyColumn Property="roster => roster.TierOneB"  />
            <TemplateColumn Context="roster">
            </TemplateColumn>
        </QuickGrid>
        <QuickGrid style="width:100%" Items="RosterFilter" Theme="roster">
            <PropertyColumn Property="roster => roster.TierTwoA"  />
            <PropertyColumn Property="roster => roster.TierTwoB"  />
            <TemplateColumn Context="roster">
            </TemplateColumn>
        </QuickGrid>
        <QuickGrid style="width:100%" Items="RosterFilter" Theme="roster">
            <PropertyColumn Property="roster => roster.TierThreeA"  />
            <PropertyColumn Property="roster => roster.TierThreeB"  />
            <TemplateColumn Context="roster">
            </TemplateColumn>
        </QuickGrid>
        <QuickGrid style="width:100%" Items="RosterFilter" Theme="roster">
            <PropertyColumn Property="roster => roster.TierFourA"  />
            <PropertyColumn Property="roster => roster.TierFourB"  />
            <TemplateColumn Context="roster">
            </TemplateColumn>
        </QuickGrid>
        <QuickGrid style="width:100%" Items="RosterFilter" Theme="roster">
            <PropertyColumn Property="roster => roster.TierFiveA"  />
            <PropertyColumn Property="roster => roster.TierFiveB"  />
            <TemplateColumn Context="roster">
            </TemplateColumn>
        </QuickGrid>
    </div>
</div>

<div class="pick-box">
    <div class = "box">
        <div class="grid">
        <p>Banned</p>
        <QuickGrid Items="TierFilter" Theme="pokedex">
        <PropertyColumn Property="pokedex => pokedex.Name" Sortable="true"/>
        <TemplateColumn Context="pokedex">
        </TemplateColumn>
        </QuickGrid>
        </div>
    </div>

    <div class = "box">
        <div class="grid">
        <h3>Mega</h3>
        <QuickGrid Items="MegaFilter" Theme="pokedex">
        <PropertyColumn Property="pokedex => pokedex.Name" Sortable="true"/>
        <PropertyColumn Property="pokedex => pokedex.Trainer" Sortable="true"/>
        <TemplateColumn>
        <AuthorizeView Context = "authContext">
            <Authorized>
                @if(@authContext.User.Identity!.Name!.ToLower() == nextPick.ToLower())
                    {
                        <div class="pick-button">
                            <button disabled="@isTaskRunning" @onclick="@(() => PickClick(context))"> PICK </button>
                        </div>
                    } 
            </Authorized>
        </AuthorizeView>
        </TemplateColumn>
        </QuickGrid>
        </div>
    </div>

    <div class = "box">
        <div class="grid">
        <h3>Tier 1</h3>
        <QuickGrid Items="TierOneFilter" Theme="pokedex">
        <PropertyColumn Property="pokedex => pokedex.Name" Sortable="true"/>
        <PropertyColumn Property="pokedex => pokedex.Trainer" Sortable="true"/>
        <TemplateColumn>
            <AuthorizeView Context="authContext">
                <Authorized>
                    @if(@authContext.User.Identity!.Name!.ToLower() == nextPick.ToLower())
                    {
                        <div class="pick-button">
                            <button disabled="@isTaskRunning" @onclick="@(() => PickClick(context))"> PICK </button>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
        </TemplateColumn>
        </QuickGrid>
        </div>
    </div>

    <div class = "box">
        <div class="grid">
        <h3>Tier 2</h3>
        <QuickGrid Items="TierTwoFilter" Theme="pokedex">
        <PropertyColumn Property="pokedex => pokedex.Name" Sortable="true"/>
        <PropertyColumn Property="pokedex => pokedex.Trainer" Sortable="true"/>
        <TemplateColumn>
            <AuthorizeView Context="authContext">
                <Authorized>
                    @if(@authContext.User.Identity!.Name!.ToLower() == nextPick.ToLower())
                    {
                        <div class="pick-button">
                            <button disabled="@isTaskRunning" @onclick="@(() => PickClick(context))"> PICK </button>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
        </TemplateColumn>
        </QuickGrid>
        </div>
    </div>

    <div class = "box">
        <div class="grid">
        <h3>Tier 3</h3>
        <QuickGrid Items="TierThreeFilter" Theme="pokedex">
        <PropertyColumn Property="pokedex => pokedex.Name" Sortable="true"/>
        <PropertyColumn Property="pokedex => pokedex.Trainer" Sortable="true"/>
        <TemplateColumn>
            <AuthorizeView Context="authContext">
                <Authorized>
                    @if(@authContext.User.Identity!.Name!.ToLower() == nextPick.ToLower())
                    {
                        <div class="pick-button">
                            <button disabled="@isTaskRunning" @onclick="@(() => PickClick(context))"> PICK </button>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
        </TemplateColumn>
        </QuickGrid>
        </div>
    </div>

    <div class = "box">
        <div class="grid">
        <h3>Tier 4</h3>
        <QuickGrid Items="TierFourFilter" Theme="pokedex">
        <PropertyColumn Property="pokedex => pokedex.Name" Sortable="true"/>
        <PropertyColumn Property="pokedex => pokedex.Trainer" Sortable="true"/>
        <TemplateColumn>
            <AuthorizeView Context="authContext">
                <Authorized>
                    @if(@authContext.User.Identity!.Name!.ToLower() == nextPick.ToLower())
                    {
                        <div class="pick-button">
                            <button disabled="@isTaskRunning" @onclick="@(() => PickClick(context))"> PICK </button>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
        </TemplateColumn>
        </QuickGrid>
        </div>
    </div>

    <div class = "box">
        <div class="grid">
        <h3>Tier 5</h3>
        <QuickGrid Items="TierFiveFilter" Theme="pokedex">
        <PropertyColumn Property="pokedex => pokedex.Name" Sortable="true"/>
        <PropertyColumn Property="pokedex => pokedex.Trainer" Sortable="true"/>
        <TemplateColumn>
            <AuthorizeView Context="authContext">
                <Authorized>
                    @if(@authContext.User.Identity!.Name!.ToLower() == nextPick.ToLower())
                    {
                        <div class="pick-button">
                            <button disabled="@isTaskRunning" @onclick="@(() => PickClick(context))"> PICK </button>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
        </TemplateColumn>
        </QuickGrid>
        </div>
    </div>

    <div class = "box">
        <div class="grid">
        <h3>Untiered(T5) <br /></h3>
        <QuickGrid Items="UntieredFilter" Theme="pokedex">
        <PropertyColumn Property="pokedex => pokedex.Name" Sortable="true"/>
        <PropertyColumn Property="pokedex => pokedex.Trainer" Sortable="true"/>
        <TemplateColumn>
            <AuthorizeView Context="authContext">
                <Authorized>
                    @if(@authContext.User.Identity!.Name!.ToLower() == nextPick.ToLower())
                    {
                        <div class="pick-button">
                            <button disabled="@isTaskRunning" @onclick="@(() => PickClick(context))"> PICK </button>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
        </TemplateColumn>
        </QuickGrid>
        </div>
    </div>
</div>

@code {
    private PokemonDraftContext context = default!;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    string trainerFilter = string.Empty;
    string message = string.Empty;
    private bool confirmPopup = false;
    private bool isTaskRunning = false;
    private bool _hasUpdated = false;
    private int pick = 0;
    private int round = 0;

    private string nextPick = string.Empty;

    // protected override async Task OnInitializedAsync()
    // {
    //     FindNextPick();
    //     GetPickAndRound();
    //     StartTimer();
    //     await base.OnInitializedAsync();
    // }

    protected override void OnAfterRender(bool firstRender)
    {
        // execute conditionally for loading data, otherwise this will load
        // every time the page refreshes
        if (firstRender && !_hasUpdated)
        {
            FindNextPick();
            GetPickAndRound();
            StartTimer();
            _hasUpdated = true;
            StateHasChanged();
        }
    }

    public void GetPickAndRound()
    {
        var roster = DbFactory.CreateDbContext();

        using (var cnn = new SqlConnection(@"Server=(LocalDB)\MSSQLLocalDB;Database=PokemonDraftContext-0ca97d9a-edc5-4557-8bad-e9ce5b55bbf8;Trusted_Connection=True;"))
        {
            cnn.Open();
            using (var cmd = cnn.CreateCommand())
            {
                cmd.CommandText = @"SELECT TOP 1 Pick FROM DraftStats_Live WHERE Pokemon IS NULL";
                pick = Convert.ToInt32(cmd.ExecuteScalar());
                cmd.ExecuteNonQuery();

                cmd.CommandText = @"SELECT TOP 1 Round FROM DraftStats_Live WHERE Pokemon IS NULL";
                round = Convert.ToInt32(cmd.ExecuteScalar());
                cmd.ExecuteNonQuery();
            }
        }
    }

    public void FindNextPick()
    {
        var roster = DbFactory.CreateDbContext();

        using (var cnn = new SqlConnection(@"Server=(LocalDB)\MSSQLLocalDB;Database=PokemonDraftContext-0ca97d9a-edc5-4557-8bad-e9ce5b55bbf8;Trusted_Connection=True;"))
        {
            cnn.Open();
            using (var cmd = cnn.CreateCommand())
            {
                var authstate = GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                var user = authstate.Result.User;

                if (user.Identity!.IsAuthenticated)
                {
                    cmd.CommandText = @"SELECT Owner FROM DraftStats_Live WHERE Pokemon IS NULL";
                    int trainerId = Convert.ToInt32(cmd.ExecuteScalar());
                    cmd.ExecuteNonQuery();

                    cmd.CommandText = @"SELECT team_owner FROM Trainer_Live WHERE Id = @TrainerId";
                    cmd.Parameters.AddWithValue("@TrainerId", trainerId);
                    var localPick = cmd.ExecuteScalar() as string;
                    cmd.ExecuteNonQuery();

                    nextPick = localPick!;
                }
                else
                {
                    nextPick = "no user logged in";
                }
                //nextpick might be not resetting?               
            }
        }
    }

    public void PickClick(Pokedex p)
    {
        //!!change pagination to "show next 10"
        //!!!check to see if user is allowed to pick that tier, should be handled by checking if they are allowed to pick!!!
        //!!!hash / salt pw
        //!!!change timer to have pause button that only "Pyth" can see
        //!!!insert dummy data to timer skip (stub)

        DateTime currentTime = DateTime.Now;
        var oldTime = context.DraftStats.Where(x => x.Tier != "").First();

        var roster = DbFactory.CreateDbContext();

        using (var cnn = new SqlConnection(@"Server=(LocalDB)\MSSQLLocalDB;Database=PokemonDraftContext-0ca97d9a-edc5-4557-8bad-e9ce5b55bbf8;Trusted_Connection=True;"))
        {
            cnn.Open();
            using (var cmd = cnn.CreateCommand())
            {
                var authstate = GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                var user = authstate.Result.User;
                var trainer = user.Identity!.Name;
                var pokemon = p.Name;
                var tier = 8;

                if(p.Tier == "Mega"){ tier = 7; }
                if(p.Tier == "One"){ tier = 1; }
                if(p.Tier == "Two"){ tier = 2; }
                if(p.Tier == "Three"){ tier = 3; }
                if(p.Tier == "Four"){ tier = 4; }
                if(p.Tier == "Five"){ tier = 5; }
                if(p.Tier == "Six") { tier = 5; }

                //finds trainerId of logged in user
                cmd.CommandText = @"SELECT Id FROM Trainer_Live WHERE team_owner = @Trainer";
                cmd.Parameters.AddWithValue("@Trainer", trainer);
                var trainerId = Convert.ToInt32(cmd.ExecuteScalar());
                cmd.ExecuteNonQuery();

                cmd.CommandText = @"SELECT TOP 1 Pick FROM DraftStats_Live WHERE Pokemon IS NULL";
                var pick = Convert.ToInt32(cmd.ExecuteScalar());
                cmd.ExecuteNonQuery();

                cmd.CommandText = @"SELECT TOP 1 Round FROM DraftStats_Live WHERE Pokemon IS NULL";
                var round = Convert.ToInt32(cmd.ExecuteScalar());
                cmd.ExecuteNonQuery();

                message = "pick {pick}, round {round}: {trainer} wants to draft #{trainerId} {pokemon} as their {tier} at {currentTime}";

                cmd.CommandText = "UPDATE DraftStats_Live SET Pokemon = @Pokemon, Tier = @Tier, Timestamp = @Time WHERE Pick = @Pick";
                cmd.Parameters.AddWithValue("@Pokemon", pokemon);
                cmd.Parameters.AddWithValue("@Tier", tier);
                cmd.Parameters.AddWithValue("@Pick", pick);
                cmd.Parameters.AddWithValue("@Time", currentTime);
                cmd.ExecuteNonQuery();

                //sets pokedex entry to new trainer
                cmd.CommandText = "UPDATE Pokedex_Live SET Trainer = @TrainerId WHERE Name = @Pokemon";
                cmd.Parameters.AddWithValue("@TrainerId", trainerId);
                //cmd.Parameters.AddWithValue("@Pokemon", pokemon);
                cmd.ExecuteNonQuery();

                //sets roster to new pokemon !!should probably be handled by views!!
                if(p.Tier!.Equals("Mega"))
                {
                    cmd.CommandText = "UPDATE Rosters_Live SET mega = @Pokemon WHERE owner_id = @TrainerId";
                    cmd.ExecuteNonQuery();
                }
                if(p.Tier!.Equals("One"))
                {
                    //check to see if this is the first or second pick of this tier
                    cmd.CommandText = @"SELECT tier_one_a FROM Rosters_Live WHERE owner_id = @TrainerId";                 
                    var rosterCheck = cmd.ExecuteScalar() as string;
                    if (rosterCheck == null)
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_one_a = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_one_b = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                }
                if (p.Tier!.Equals("Two"))
                {
                    //check to see if this is the first or second pick of this tier
                    cmd.CommandText = @"SELECT tier_two_a FROM Rosters_Live WHERE owner_id = @TrainerId";
                    var rosterCheck = cmd.ExecuteScalar() as string;
                    if (rosterCheck == null)
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_two_a = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_two_b = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                }
                if (p.Tier!.Equals("Three"))
                {
                    //check to see if this is the first or second pick of this tier
                    cmd.CommandText = @"SELECT tier_three_a FROM Rosters_Live WHERE owner_id = @TrainerId";
                    var rosterCheck = cmd.ExecuteScalar() as string;
                    if (rosterCheck == null)
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_three_a = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_three_b = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                }
                if (p.Tier!.Equals("Four"))
                {
                    //check to see if this is the first or second pick of this tier
                    cmd.CommandText = @"SELECT tier_four_a FROM Rosters_Live WHERE owner_id = @TrainerId";
                    var rosterCheck = cmd.ExecuteScalar() as string;
                    if (rosterCheck == null)
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_four_a = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_four_b = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                }
                if (p.Tier!.Equals("Five"))
                {
                    //check to see if this is the first or second pick of this tier
                    cmd.CommandText = @"SELECT tier_four_a FROM Rosters_Live WHERE owner_id = @TrainerId";
                    var rosterCheck = cmd.ExecuteScalar() as string;
                    if (rosterCheck == null)
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_five_a = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_five_b = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                }
                if (p.Tier!.Equals("Six"))
                {
                    //check to see if this is the first or second pick of this tier
                    cmd.CommandText = @"SELECT tier_five_a FROM Rosters_Live WHERE owner_id = @TrainerId";
                    var rosterCheck = cmd.ExecuteScalar() as string;
                    if (rosterCheck == null)
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_five_a = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE Rosters_Live SET tier_five_b = @Pokemon WHERE owner_id = @TrainerId";
                        cmd.ExecuteNonQuery();
                    }
                }
            }
        }
        navigationManager.NavigateTo("/livedraft", forceLoad: true);
        //confirmPopup = true;
    }

    private void HideConfirm()
    {
        confirmPopup = false;
    }

    private void ConfirmChoice()
    {
        var roster = DbFactory.CreateDbContext();

        using (var cnn = new SqlConnection(@"Server=(LocalDB)\MSSQLLocalDB;Database=PokemonDraftContext-0ca97d9a-edc5-4557-8bad-e9ce5b55bbf8;Trusted_Connection=True;"))
        {
            cnn.Open();
            using (var cmd = cnn.CreateCommand())
            {
                //cmd.CommandText = "UPDATE Rosters SET TierName = 'TestError' WHERE ID = 8";
                //cmd.CommandText = "UPDATE Rosters SET mega = 'Pinsir' WHERE team_owner = 'Pyth'";
                context = DbFactory.CreateDbContext();

                cmd.ExecuteNonQuery();
            }
        }

        //message = $" wants to draft {p.Name} as their {p.Tier}";

        confirmPopup = false;
    }

    private IQueryable<Pokedex> TierFilter
    {
        get
        {
            context = DbFactory.CreateDbContext();
            var result = context.Pokedex.Where(x => x.Tier!.Contains("Banned"));
            return result;
        }      
    }

    private IQueryable<Pokedex> MegaFilter
    {
        get
        {
            context = DbFactory.CreateDbContext();
            var result = context.Pokedex.Where(x => x.Tier!.Contains("Mega"));
            result = result.Where(x => x.Trainer!.Contains("Free Agent"));
            return result;
        }      
    }

    private IQueryable<Pokedex> TierOneFilter
    {
        get
        {
            context = DbFactory.CreateDbContext();
            var result = context.Pokedex.Where(x => x.Tier!.Contains("One"));
            result = result.Where(x => x.Trainer!.Contains("Free Agent"));
            return result;
        }      
    }

    private IQueryable<Pokedex> TierTwoFilter
    {
        get
        {
            context = DbFactory.CreateDbContext();
            var result = context.Pokedex.Where(x => x.Tier!.Contains("Two"));
            result = result.Where(x => x.Trainer!.Contains("Free Agent"));
            return result;
        }      
    }

    private IQueryable<Pokedex> TierThreeFilter
    {
        get
        {
            context = DbFactory.CreateDbContext();
            var result = context.Pokedex.Where(x => x.Tier!.Contains("Three"));
            result = result.Where(x => x.Trainer!.Contains("Free Agent"));
            return result;
        }      
    }

    private IQueryable<Pokedex> TierFourFilter
    {
        get
        {
            context = DbFactory.CreateDbContext();
            var result = context.Pokedex.Where(x => x.Tier!.Contains("Four"));
            result = result.Where(x => x.Trainer!.Contains("Free Agent"));
            return result;
        }      
    }

    private IQueryable<Pokedex> TierFiveFilter
    {
        get
        {
            context = DbFactory.CreateDbContext();
            var result = context.Pokedex.Where(x => x.Tier!.Contains("Five"));
            result = result.Where(x => x.Trainer!.Contains("Free Agent"));
            return result;
        }      
    }

    private IQueryable<Pokedex> UntieredFilter
    {
        get
        {
            context = DbFactory.CreateDbContext();
            var result = context.Pokedex.Where(x => x.Tier!.Contains("Six"));
            result = result.Where(x => x.Trainer!.Contains("Free Agent"));
            return result;
        }      
    }


    private IQueryable<Roster> RosterFilter
    {
        get
        {
            if(trainerFilter == "")
            {
                var authstate = GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                var user = authstate.Result.User;
                var name = user.Identity.Name;
                context = DbFactory.CreateDbContext();
                //var trainerId = context.Trainer.Where(x => x.TrainerName == name).First();
                var result = context.Rosters.Where(x => x.TeamOwner == name);
                //var result = context.Rosters.Where(x => x.TeamName!.Contains("Tormenting Togekiss"));
                return result;
            }
            else
            {
                var authstate = GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                var user = authstate.Result.User;
                var name = user.Identity.Name;
                context = DbFactory.CreateDbContext();
                //var trainerId = context.Trainer.Where(x => x.TrainerName == name).First();
                var result = context.Rosters.Where(x => x.TeamOwner == trainerFilter);
                //var result = context.Rosters.Where(x => x.TeamName!.Contains("Tormenting Togekiss"));
                return result;
            }
        }
    }

    private IQueryable<DraftStats> RecentPicks
    {
        get
        {
            context = DbFactory.CreateDbContext();
            var result = context.DraftStats.Where(x => x.Tier != "");
            //var result = context.DraftStats;
            return result;
        }
    }

    private IQueryable<DraftStats> UpcomingPicks
    {
        get
        {
            context = DbFactory.CreateDbContext();
            //var result = context.DraftStats.Where(x => x.Pokemon == null);
            var result = context.DraftStats.Where(x => x.Pokemon == null);
            return result;
        }
    }

    private IQueryable<DraftStats> DraftFilter
    {
        get
        {
            context = DbFactory.CreateDbContext();
            var result = context.DraftStats.Where(x => x.Pick! > 0);
            return result;
        }
    }

    private Timer _timer;
    private TimeSpan _remainingTime;
    private bool _isRunning = true;
    private bool isTimeUp = false;
    private string remainingTimeFormatted => _remainingTime.ToString(@"hh\:mm\:ss");

    //private int round = 1;
    //private int pick = 1;
    private int timezone;
    private bool penalty = false;
    private int playerCount = 16;
    private int test = 0;

    // Method to start the countdown timer
    private void StartTimer()
    {
        if (_timer == null)
        {
            _timer = new Timer(1000); // Timer will tick every second
            _timer.Elapsed += TimerElapsed;
        }

        _timer.Start();
        //_isRunning = true;

        if (round < 5)
        {
            if (!_isRunning)
            {
                _isRunning = true;
                SetSkippedPick();
            }

            SetTimerTo4Hours();
        }
        else if(round > 4)
        {
            //SetTimerTo2Hours();

            if (!_isRunning)
            {
                _isRunning = true;
                SetSkippedPick();
            }

            //SetTimerTo2Hours();
            SetTimerTo4Hours();
        }

    }

    // Method to stop the countdown timer
    private void StopTimer()
    {
        _timer?.Stop();
        _isRunning = false;
    }

    // Timer's Elapsed event handler
    private void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (ShouldPauseTimer())
        {
            // If the time is between 00:00 and 08:00 EST, pause the timer.
            StopTimer();
        }
        else
        {
            if (_remainingTime.TotalSeconds > 0)
            {
                _remainingTime = _remainingTime.Add(TimeSpan.FromSeconds(-1)); // Decrement time by 1 second
                InvokeAsync(StateHasChanged); // Update the UI
            }
            else
            {
                //_remainingTime = _remainingTime.Add(TimeSpan.FromSeconds(999)); //please stop entering this 15 times aaaaa

                // Timer finished, show "Time's Up!" message
                isTimeUp = true;
                StopTimer();
                InvokeAsync(StateHasChanged); // Update UI with "Time's Up!"
                StartTimer();
            }
        }
    }

    private void SetSkippedPick()
    {
        _isRunning = true;

        var roster = DbFactory.CreateDbContext();

        using (var cnn = new SqlConnection(@"Server=(LocalDB)\MSSQLLocalDB;Database=PokemonDraftContext-0ca97d9a-edc5-4557-8bad-e9ce5b55bbf8;Trusted_Connection=True;"))
        {
            cnn.Open();
            using (var cmd = cnn.CreateCommand())
            {
                var authstate = GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                var user = authstate.Result.User;
                var trainer = user.Identity!.Name;
                var pokemon = "Skipped";
                var tier = 9;
                DateTime currentTime = DateTime.Now;

                cmd.CommandText = @"SELECT TOP 1 Pick FROM DraftStats_Live WHERE Pokemon IS NULL";
                var pick = Convert.ToInt32(cmd.ExecuteScalar());
                //cmd.ExecuteNonQuery();

                cmd.CommandText = @"SELECT TOP 1 Round FROM DraftStats_Live WHERE Pokemon IS NULL";
                var round = Convert.ToInt32(cmd.ExecuteScalar());
                //cmd.ExecuteNonQuery();

                message = "pick {pick}, round {round}: {trainer} wants to draft #{trainerId} {pokemon} as their {tier} at {currentTime}";

                cmd.CommandText = "UPDATE DraftStats_Live SET Pokemon = @Pokemon, Tier = @Tier, Timestamp = @Time WHERE Pick = @Pick";
                cmd.Parameters.AddWithValue("@Pokemon", pokemon);
                cmd.Parameters.AddWithValue("@Tier", tier);
                cmd.Parameters.AddWithValue("@Pick", pick);
                cmd.Parameters.AddWithValue("@Time", currentTime);
                cmd.ExecuteNonQuery();

                _isRunning = true;
            }
            cnn.Close();
            Dispose();
            navigationManager.NavigateTo("/livedraft", forceLoad: true);       
        }
    }

    public void Dispose()
    {
        Console.WriteLine("Dispose");
        _timer?.Dispose();
    }

    // C# method to be invoked from JavaScript
    [JSInvokable]
    public void DisposeComponent()
    {
        // Dispose of resources
        Dispose();
    }

    // Method to check if the current time is between 00:00 and 08:00 EST
    private bool ShouldPauseTimer()
    {
        var currentTime = DateTime.UtcNow.AddHours(-5); // Convert to EST (UTC-5)

        // Check if current time is between 00:00 and 08:00 EST
        return currentTime.Hour >= 0 && currentTime.Hour < 8;
    }

    // Button to set timer to 4 hours
    private void SetTimerTo4Hours()
    {
        DateTime currentTime = DateTime.Now;
        DateTime oldTime = DateTime.MinValue;
        TimeSpan timeDiff = TimeSpan.MinValue;
        // string skipped = string.Empty;
        var roster = DbFactory.CreateDbContext();

        using (var cnn = new SqlConnection(@"Server=(LocalDB)\MSSQLLocalDB;Database=PokemonDraftContext-0ca97d9a-edc5-4557-8bad-e9ce5b55bbf8;Trusted_Connection=True;"))
        {
            cnn.Open();
            using (var cmd = cnn.CreateCommand())
            {
                cmd.CommandText = @"SELECT Timestamp FROM DraftStats_Live WHERE ID = (SELECT MAX(Id) FROM DraftStats_Live WHERE Pokemon is NOT NULL)";
                var parseTime = cmd.ExecuteScalar();
                cmd.ExecuteNonQuery();

                // cmd.CommandText = @"SELECT Pokemon FROM DraftStats_Live WHERE ID = (SELECT MAX(Id) FROM DraftStats_Live WHERE Pokemon is NOT NULL)";
                // var parseSkipped = cmd.ExecuteScalar() as string;
                // cmd.ExecuteNonQuery();

                //var message = "time: {parseTime}";
                oldTime = Convert.ToDateTime(parseTime);
                //skipped = Convert.ToString(parseSkipped!);
            }
        }

        if (oldTime != DateTime.MinValue)
        {
            timeDiff = TimeSpan.FromHours(4) - (currentTime - oldTime);

            //timeDiff = TimeSpan.FromSeconds(7);
        }
        // if (skipped == "Skipped")
        // {
        //     timeDiff = TimeSpan.FromHours(4) - (currentTime - oldTime);

        //     //timeDiff = TimeSpan.FromSeconds(6);
        // }


        //_remainingTime = currentTime;
        _remainingTime = timeDiff;
        isTimeUp = false; // Reset "Time's Up!" flag
        if (!_isRunning)
        {
            StartTimer();
        }
    }

    // Button to set timer to 2 hours
    private void SetTimerTo2Hours()
    {

        // if (pick == playerCount)
        // {
        //     round++;
        //     pick = 0;
        // }
        // pick++;

        if(round > 11)
        {
            // round = 11;
            // pick = 16;
            isTimeUp = true;
        }
        else
        {
            _remainingTime = TimeSpan.FromHours(2);
            isTimeUp = false; // Reset "Time's Up!" flag
            if (!_isRunning)
            {
                StartTimer();
            }
        }
    }

    // Button to set timer to countdown to 3 PM EST
    private void SetTimerTo3PM()
    {
        // var currentTime = DateTime.UtcNow.AddHours(-5); // Convert to EST (UTC-5)
        // var targetTime = new DateTime(currentTime.Year, currentTime.Month, currentTime.Day, 14, 3, 0); // 3 PM EST

        // if (currentTime > targetTime)
        // {
        //     // If current time is already past 3 PM today, set the timer to 3 PM tomorrow
        //     targetTime = targetTime.AddDays(1);
        // }

        // _remainingTime = targetTime - currentTime; // Calculate the time remaining to 3 PM EST
        // isTimeUp = false; // Reset "Time's Up!" flag
        // if (!_isRunning)
        // {
        //     StartTimer();
        // }

        SetSkippedPick();


    }

    // Button to reset the timer to 4 hours
    private void ResetTimerTo4Hours()
    {
        if (round < 5) { SetTimerTo4Hours(); }
        else { SetTimerTo2Hours(); }
    }
}